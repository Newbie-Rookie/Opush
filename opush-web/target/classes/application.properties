spring.profiles.active=dev
spring.application.name=opush

########################################## database start ######################################
#SpringDataJPA + Druid数据库连接池 + MySQL数据库
spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.url=jdbc:mysql://${opush.database.ip}:${opush.database.port}/opush
spring.datasource.druid.username=${opush.database.username}
spring.datasource.druid.password=${opush.database.password}
#初始化连接数
spring.datasource.druid.initial-size=10
#最小连接数
spring.datasource.druid.min-idle=20
#最大连接数
spring.datasource.druid.max-active=50
#最大连接等待超时时间
spring.datasource.druid.max-wait=5000
########################################## database end #########################################

########################################## redis start ##########################################
spring.redis.host=${opush.redis.ip}
spring.redis.port=${opush.redis.port}
spring.redis.password=${opush.redis.password}
# redis数据库(共16个，0 ~ 15)
spring.redis.database=${opush.redis.database}
spring.redis.jedis.pool.max-active=8
spring.redis.jedis.pool.max-idle=8
spring.redis.jedis.pool.min-idle=0
spring.redis.jedis.pool.max-wait=1000
########################################## redis end ############################################

########################################## grayLog start ########################################
opush.grayLog.ip=${opush.graylog.ip}
opush.grayLog.udp.port=${opush.graylog.udp.port}
########################################## grayLog end ##########################################

########################################## kafka start ##########################################
##### Kafka集群
spring.kafka.bootstrap-servers=${opush.kafka.ip}:${opush.kafka.port}
##### 生产者配置
### 生产者key-value序列化配置
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
### 提高生产者吞吐量
# 缓存双端队列中每批次大小（默认16k）
spring.kafka.producer.batch-size=16384
# sender线程等待时间（默认0ms，此时batch.size无作用）
spring.kafka.producer.properties.linger.ms=0
# 生产者数据的压缩类型（默认none，即无压缩，gzip/snappy）
spring.kafka.producer.compression-type=none
# RecordAccumulator缓冲区大小（默认32m）
spring.kafka.producer.buffer-memory=3354432
### 保证数据可靠性
# ACK应答级别（默认-1）
spring.kafka.producer.acks=-1
### 保证数据不重复
# 开启生产者幂等性（默认true）
spring.kafka.producer.properties.enable.idempotence=true
# 消息发送失败重试次数（默认int最大值）
# spring.kafka.producer.retries=3
# 事务id（使用生产者事务时需配置）
# spring.kafka.producer.properties.transactional.id=事务id
##### 消费者配置
### 消费者key-value反序列化配置
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
### offset提交问题
# offset自动提交（默认true）
spring.kafka.consumer.enable-auto-commit=true
# 自动提交offset的时间间隔（默认5s）
spring.kafka.consumer.auto-commit-interval=1000
### 消费者如何消费一个无偏移量/偏移量无效的分区（latest、earliest、none）
spring.kafka.consumer.auto-offset-reset=earliest
### 控制消费者组内消费者是否正常
# 消费者超时未发送心跳信息（默认45s）
spring.kafka.consumer.properties.session.timeout.ms=45000
# 消费者处理消息超时时间（默认5分钟）
spring.kafka.consumer.properties.max.poll.interval.ms=300000
### 控制消费者消费流程
# 消费者客户端每批次最小抓取数据大小（默认1字节）
spring.kafka.consumer.fetch-min-size=1
# 一批数据最小值未达到的超时时间（默认500ms）
spring.kafka.consumer.fetch-max-wait=500
# 消费者客户端每批次最大抓取数据大小（默认50m）
spring.kafka.consumer.properties.fetch.max.bytes=52428800
# 消费者一次从队列中拉取消息的最大条数（默认500条）
spring.kafka.consumer.max-poll-records=500
### 消费者分区分配策略（Kafka3.0前默认采用Range，Kafka3.0后默认采用Range + CooperativeSticky）
# spring.kafka.consumer.properties.partition.assignment.strategy=org.apache.kafka.clients.consumer.RangeAssignor
### topic（主题）
opush.business.send.topic.name=opushSend
opush.business.recall.topic.name=opushRecall
opush.business.log.topic.name=opushTraceLog
### groupId（消费者id）
opush.business.recall.group.id=opushRecallGroupId
########################################## kafka end ############################################

########################################## apollo start #########################################
# 暂时接入远程配置服务Apollo/Nacos
# app.id=opush
# apollo.bootstrap.enabled=${opush.apollo.enabled}
# apollo.bootstrap.namespaces=
########################################## apollo end ###########################################

########################################## system start #########################################
# 开启优雅停机
server.shutdown=graceful
########################################## system end ###########################################
version: '3'
services:
  zookepper:
    # 原镜像`wurstmeister/zookeeper`
    image: wurstmeister/zookeeper
    # 容器名为'zookeeper'
    container_name: zookeeper
    # 数据卷挂载路径设置
    volumes:
      - "/etc/localtime:/etc/localtime"
    # 映射端口
    ports:
      - "2181:2181"

  kafka:
    # 原镜像`wurstmeister/kafka`
    image: wurstmeister/kafka
    # 容器名为'kafka'
    container_name: kafka
    # 数据卷挂载路径设置
    volumes:
      - "/etc/localtime:/etc/localtime"
    # 设置环境变量（相当于docker run命令中的-e）
    environment:
      # 在kafka集群中，每个kafka都有一个BROKER_ID来区分自己
      KAFKA_BROKER_ID: 0
      # TODO：设置kafka的ip
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://110.40.150.166:9092
      # 配置kafka的监听端口
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "hello_world"
      KAFKA_HEAP_OPTS: -Xmx1G -Xms256M
    # 映射端口
    ports:
      - "9092:9092"
    # 解决容器依赖启动先后问题
    depends_on:
      - zookepper
  # 原镜像`sheepkiller/kafka-manager`
  kafka-manager:
    image: sheepkiller/kafka-manager
    # 容器名为'kafka-manager'
    container_name: kafka-manager
    # 设置环境变量（相当于docker run命令中的-e）
    environment:
      ZK_HOSTS: zookeeper:2181
      APPLICATION_SECRET: xxxxx
      # 开启kafka-manager权限校验
      KAFKA_MANAGER_AUTH_ENABLED: "true"
      # 登陆账户
      KAFKA_MANAGER_USERNAME: admin
      # 登陆密码
      KAFKA_MANAGER_PASSWORD: 123456
    # 映射端口
    ports:
      - "9000:9000"
    # 解决容器依赖启动先后问题
    depends_on:
      - kafka